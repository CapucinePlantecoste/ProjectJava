//this class is the frame which the buyer seees after he researched a property with different criteria 
package View;

import Model.Visit;
import Model.Seller;
import Model.Property;
import Model.Offer;
import Model.Employee;
import Model.Buyer;
import Model.OfferDAOImpl;
import Model.VisitDAOImpl;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import projectjava.First;

/**
 *
 * @author CAP
 */
public class BuyerResults extends javax.swing.JFrame {

    /**
     * Creates new form BuyerResults
     */
    public BuyerResults(Buyer a, ArrayList<Buyer> b, ArrayList<Seller> s, ArrayList<Employee> e, ArrayList<Property> prop, ArrayList<Visit> vis, ArrayList<Offer> off, ArrayList<Property> r) {
        //constructor of the class
        buyers = b;
        //Array List of all the buyers of the database 
        sellers = s;
        //Array List of all the sellers of the database
        emp = e;
        //Array List of all the employees of the database 
        pr = prop;
        //Array List of all the properties of the database
        v = vis;
        //Array List of all the viewings of the database
        o = off;
        //Array List of all the offers of the database

        newbuyer = a;
        //buyer that is connected 

        result = r;
        //Array List of all the propeties that resulted after the criteria of the newbuyer were taken into account 

        initComponents();
        //automatically generated constructor for components 
        jPanelApartment.hide();
        //in the beginning, we hide all the other panels 
        jPanelHouse.hide();
        //in the beginning, we hide all the other panels   

        this.initjcb1();
        //function that enables to fill the combobox with the results of the buyer

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanelHouse = new javax.swing.JPanel();
        jLabelType = new javax.swing.JLabel();
        jLabelPrice = new javax.swing.JLabel();
        jLabelNumberFloors = new javax.swing.JLabel();
        jLabelLocation1 = new javax.swing.JLabel();
        jLabelNumberRooms1 = new javax.swing.JLabel();
        jLabelNumberSurface = new javax.swing.JLabel();
        jLabelNumberBedrooms2 = new javax.swing.JLabel();
        jLabelGardenSurface = new javax.swing.JLabel();
        jLabelSwimmingPool = new javax.swing.JLabel();
        jLabelDescription = new javax.swing.JLabel();
        jButton8 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jComboBoxViewingHouse = new javax.swing.JComboBox();
        jPanelApartment = new javax.swing.JPanel();
        jLabelType1 = new javax.swing.JLabel();
        jLabelDescription1 = new javax.swing.JLabel();
        jLabelPrice2 = new javax.swing.JLabel();
        jLabelNumberFloors1 = new javax.swing.JLabel();
        jLabelLocation2 = new javax.swing.JLabel();
        jLabelNumberRooms2 = new javax.swing.JLabel();
        jLabelNumberSurface1 = new javax.swing.JLabel();
        jLabelNumberBedrooms3 = new javax.swing.JLabel();
        jLabelFloorNumber = new javax.swing.JLabel();
        jLabelElevator = new javax.swing.JLabel();
        jLabelParking = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jButton9 = new javax.swing.JButton();
        jComboBoxViewingApartment = new javax.swing.JComboBox();
        jPanel4 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setLayout(null);

        jPanelHouse.setBackground(new java.awt.Color(255, 255, 255));

        jLabelType.setBackground(new java.awt.Color(255, 255, 255));
        jLabelType.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabelType.setForeground(new java.awt.Color(0, 153, 153));
        jLabelType.setText("Type : House");

        jLabelPrice.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabelPrice.setForeground(new java.awt.Color(0, 153, 153));

        jLabelNumberFloors.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabelNumberFloors.setForeground(new java.awt.Color(0, 153, 153));

        jLabelLocation1.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabelLocation1.setForeground(new java.awt.Color(0, 153, 153));

        jLabelNumberRooms1.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabelNumberRooms1.setForeground(new java.awt.Color(0, 153, 153));

        jLabelNumberSurface.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabelNumberSurface.setForeground(new java.awt.Color(0, 153, 153));

        jLabelNumberBedrooms2.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabelNumberBedrooms2.setForeground(new java.awt.Color(0, 153, 153));

        jLabelGardenSurface.setBackground(new java.awt.Color(255, 255, 255));
        jLabelGardenSurface.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabelGardenSurface.setForeground(new java.awt.Color(0, 153, 153));

        jLabelSwimmingPool.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabelSwimmingPool.setForeground(new java.awt.Color(0, 153, 153));

        jLabelDescription.setBackground(new java.awt.Color(255, 255, 255));
        jLabelDescription.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabelDescription.setForeground(new java.awt.Color(0, 153, 153));

        jButton8.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jButton8.setText("Validate");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabel1.setText("Make an offer ?");

        jTextField1.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jTextField1.setForeground(new java.awt.Color(0, 153, 153));
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField1KeyTyped(evt);
            }
        });

        jComboBoxViewingHouse.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jComboBoxViewingHouse.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Book a Viewing" }));
        jComboBoxViewingHouse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxViewingHouseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelHouseLayout = new javax.swing.GroupLayout(jPanelHouse);
        jPanelHouse.setLayout(jPanelHouseLayout);
        jPanelHouseLayout.setHorizontalGroup(
            jPanelHouseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelHouseLayout.createSequentialGroup()
                .addGap(100, 100, 100)
                .addGroup(jPanelHouseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelHouseLayout.createSequentialGroup()
                        .addGap(135, 135, 135)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton8)
                        .addGap(116, 116, 116))
                    .addGroup(jPanelHouseLayout.createSequentialGroup()
                        .addGroup(jPanelHouseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelType, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelGardenSurface, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelNumberFloors, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 423, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanelHouseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelNumberSurface, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelLocation1, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelNumberBedrooms2, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelNumberRooms1, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelSwimmingPool, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(jPanelHouseLayout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jComboBoxViewingHouse, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanelHouseLayout.setVerticalGroup(
            jPanelHouseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelHouseLayout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addGroup(jPanelHouseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelHouseLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabelLocation1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelNumberRooms1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelNumberBedrooms2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelNumberSurface, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabelSwimmingPool, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(49, 49, 49))
                    .addGroup(jPanelHouseLayout.createSequentialGroup()
                        .addComponent(jLabelType, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(13, 13, 13)
                        .addComponent(jLabelGardenSurface, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabelPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabelNumberFloors, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabelDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBoxViewingHouse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanelHouseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton8)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39))
        );

        jPanel2.add(jPanelHouse);
        jPanelHouse.setBounds(770, 190, 760, 390);

        jPanelApartment.setBackground(new java.awt.Color(255, 255, 255));

        jLabelType1.setBackground(new java.awt.Color(0, 153, 153));
        jLabelType1.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabelType1.setForeground(new java.awt.Color(0, 153, 153));
        jLabelType1.setText("Type : Apartment");

        jLabelDescription1.setBackground(new java.awt.Color(255, 255, 255));
        jLabelDescription1.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabelDescription1.setForeground(new java.awt.Color(0, 153, 153));

        jLabelPrice2.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabelPrice2.setForeground(new java.awt.Color(0, 153, 153));

        jLabelNumberFloors1.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabelNumberFloors1.setForeground(new java.awt.Color(0, 153, 153));

        jLabelLocation2.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabelLocation2.setForeground(new java.awt.Color(0, 153, 153));

        jLabelNumberRooms2.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabelNumberRooms2.setForeground(new java.awt.Color(0, 153, 153));

        jLabelNumberSurface1.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabelNumberSurface1.setForeground(new java.awt.Color(0, 153, 153));

        jLabelNumberBedrooms3.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabelNumberBedrooms3.setForeground(new java.awt.Color(0, 153, 153));

        jLabelFloorNumber.setBackground(new java.awt.Color(255, 255, 255));
        jLabelFloorNumber.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabelFloorNumber.setForeground(new java.awt.Color(0, 153, 153));

        jLabelElevator.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabelElevator.setForeground(new java.awt.Color(0, 153, 153));

        jLabelParking.setBackground(new java.awt.Color(255, 255, 255));
        jLabelParking.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabelParking.setForeground(new java.awt.Color(0, 153, 153));

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabel3.setText("Make an offer ?");

        jTextField2.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jTextField2.setForeground(new java.awt.Color(0, 153, 153));
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });
        jTextField2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField2KeyTyped(evt);
            }
        });

        jButton9.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jButton9.setText("Validate");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jComboBoxViewingApartment.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jComboBoxViewingApartment.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Book a Viewing" }));
        jComboBoxViewingApartment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxViewingApartmentActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelApartmentLayout = new javax.swing.GroupLayout(jPanelApartment);
        jPanelApartment.setLayout(jPanelApartmentLayout);
        jPanelApartmentLayout.setHorizontalGroup(
            jPanelApartmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelApartmentLayout.createSequentialGroup()
                .addGap(76, 76, 76)
                .addGroup(jPanelApartmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelPrice2, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelNumberFloors1, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelType1, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelParking, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelFloorNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelApartmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabelNumberBedrooms3, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)
                    .addComponent(jLabelNumberRooms2, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)
                    .addComponent(jLabelNumberSurface1, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)
                    .addComponent(jLabelLocation2, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)
                    .addComponent(jLabelElevator, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanelApartmentLayout.createSequentialGroup()
                .addGroup(jPanelApartmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanelApartmentLayout.createSequentialGroup()
                        .addGap(197, 197, 197)
                        .addComponent(jLabelDescription1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanelApartmentLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jComboBoxViewingApartment, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton9)
                        .addGap(43, 43, 43)))
                .addContainerGap())
        );
        jPanelApartmentLayout.setVerticalGroup(
            jPanelApartmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelApartmentLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(jPanelApartmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanelApartmentLayout.createSequentialGroup()
                        .addComponent(jLabelLocation2, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelNumberRooms2, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabelNumberBedrooms3, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabelNumberSurface1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabelElevator, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelApartmentLayout.createSequentialGroup()
                        .addComponent(jLabelType1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabelParking, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(jLabelPrice2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabelNumberFloors1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabelFloorNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelDescription1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelApartmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton9)
                    .addComponent(jLabel3)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxViewingApartment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22))
        );

        jPanel2.add(jPanelApartment);
        jPanelApartment.setBounds(800, 230, 740, 400);

        jPanel4.setBackground(new java.awt.Color(0, 153, 153));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/projectjava/logo 2 projet info.png"))); // NOI18N

        jLabel2.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));

        jComboBox1.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select one of the following properties" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Calibri", 0, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Properties corresponding to your criteria ");

        jButton1.setText("<= Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 409, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1344, 1344, 1344))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(jButton1))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(196, 196, 196)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(265, 265, 265)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(173, 173, 173)
                    .addComponent(jLabel2)
                    .addContainerGap(1590, Short.MAX_VALUE)))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(jButton1)
                .addGap(19, 19, 19)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(70, 70, 70)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(700, Short.MAX_VALUE)))
        );

        jPanel2.add(jPanel4);
        jPanel4.setBounds(0, 0, 740, 830);

        jButton5.setBackground(new java.awt.Color(255, 255, 255));
        jButton5.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jButton5.setText("Log Out");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton5);
        jButton5.setBounds(1350, 80, 100, 23);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 1575, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 850, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        //Log out button, we go back on the first page if clicked 
        setVisible(false);
        //this page disappears
        new First(buyers, sellers, emp, pr, v, o).toFront();
        //we go back on the first page
        new First(buyers, sellers, emp, pr, v, o).setState(java.awt.Frame.NORMAL);
        new First(buyers, sellers, emp, pr, v, o).setVisible(true);
        //we set the first jframe visible

    }//GEN-LAST:event_jButton5ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        //the combobox chere all the results of the research appear after the criteria were taken into account
        int tampon = 0;
        //temporary buffer

        String selected = (String) jComboBox1.getSelectedItem();
        //we get what has been selected from the combo box
        if (selected.equals("Select one of the following properties")) {
            //if Select one of the following properties has been selected 
            jPanelApartment.hide();
            jPanelHouse.hide();
            //nothing happens, everything remains hidden
        } else {
            //otherwise
            for (int i = 0; i < result.size(); i++) {
                //we go through all the results arraylist 
                if (selected.equals(result.get(i).getdescription() + " id : " + result.get(i).getid())) {
                    //if what has been selected corresponds to one of the results in the result arraylist

                    tampon = i;
                    //we set the value of the buffer to i 
                }
            }
            this.display(result.get(tampon));
            //then we call the display function (see behind) to display all the details about the selected property  with the help of the buffer
        }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // back button
        this.toBack();
        //if we click on the back button
        setVisible(false);
        //this page disappears
        BuyerFirst a = new BuyerFirst(newbuyer, buyers, sellers, emp, pr, v, o);
        a.setVisible(true);
        //we go back on the previous page
        new BuyerFirst(newbuyer, buyers, sellers, emp, pr, v, o).setState(java.awt.Frame.NORMAL);

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        //Text field corresponding to the amount of the offer of a house if the buyer decides to make one
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        //Text field corresponding to the amount of the offer of an apartment if the buyer decides to make one
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jTextField1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyTyped
        //function that unables the user to enter something else than digit (because we want the amount of an offer)
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_jTextField1KeyTyped

    private void jTextField2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField2KeyTyped
        //function that unables the user to enter something else than digit (because we want the amount of an offer)
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_jTextField2KeyTyped

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        //Button to validate the offer for an apartment
        int tampon = -1;
        int tampon2 = 0;
        //temporary buffers 
        String selected = (String) jComboBox1.getSelectedItem();
        //we get what has been selected from the first jcombobox
        for (int i = 0; i < result.size(); ++i) //we go through our arraylist containing all the properties that correspond to the criteria entered 
        {
            if ((result.get(i).getdescription() + " id : " + result.get(i).getid()).equals(selected)) // if what has been selected is equal to the description + the id of a property contained in the arraylist of results
            {
                tampon = i;
                //we set the value of the buffer to i 
            }
        }
        if (jTextField2.getText().trim().isEmpty()) //if the buyer wants to make an offer but the field for the offer is empty
        {
            JOptionPane.showMessageDialog(null, "Please enter an amount if you want to make an order");
            //we let him know 
        } else //otherwise, the field for the amount of the offer is not empty
        {
            for (int i = 0; i < o.size(); ++i) //we go through the arraylist of all the offers of the database  
            {
                if ((o.get(i).getidprop() == result.get(tampon).getid()) && (o.get(i).getidbuyer() == newbuyer.getid()) && (o.get(i).getdeclined() == false)) {
                    //We check if in the offer array list, there is one offer made by this buyer on this house that has not been declined yet
                    tampon2++;
                    //we increment the buffer
                }
            }
            if (tampon2 != 0) //if the buffer has been incremented, it means the buyer has already made an offer that has not been declined
            {
                JOptionPane.showMessageDialog(null, "You have already made an offer for this property that  has either been accepted or not treated");
                //we let him know 
            } else //otherwise, he has no current offer that has not been declined
            {
                this.addoffer(result.get(tampon).getid(), Double.parseDouble(jTextField2.getText()));
                // So we call the function add offer that gets into parameter the id of the property and the amount of the offer
            }
        }
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jComboBoxViewingHouseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxViewingHouseActionPerformed
        //the combobox of the available viewings for a house, to book one
        int tampon = -1;
        //temporary buffer 
        String selected = (String) jComboBoxViewingHouse.getSelectedItem();
        //we get what has been selected in the combo box of the viewings 
        if (selected.equals("Book a Viewing")) //if "Book a viewing"
        {
            //nothing happens
        } else //otherwise, 
        {
            for (int i = 0; i < v.size(); ++i) //we go through the arraylist of all the viewings contained in the database 
            {
                if ((v.get(i).gettime() + " idvisit : " + v.get(i).getid()).equals(selected)) //if what has been selected in the viewing combobox corresponds to the time and id of a viewing contained in the viewing arraylist
                {
                    tampon = i;
                    //we set the value of the buffer to i 
                }
            }
            this.bookviewinghouse(v.get(tampon));
            //we book this viewing by sending the selected viewing in parameters of the function 
        }
    }//GEN-LAST:event_jComboBoxViewingHouseActionPerformed

    private void jComboBoxViewingApartmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxViewingApartmentActionPerformed
        //the combobox of the available viewings for an apartment, to book one
        int tampon = -1;
        //temporary buffer
        String selected = (String) jComboBoxViewingApartment.getSelectedItem();
        //we get what has been selected in the combo box of the viewings
        if (selected.equals("Book a Viewing")) //if Book a viewing
        {
            //nothing happens
        } else //otherwise,
        {
            for (int i = 0; i < v.size(); ++i) //we go through the arraylist of all the viewings contained in the database 
            {
                if ((v.get(i).gettime() + " idvisit : " + v.get(i).getid()).equals(selected)) //if what has been selected in the viewing combobox corresponds to the time and id of a viewing contained in the viewing arraylist
                {
                    tampon = i;
                    //we set the value of the buffer to i 
                }
            }
            this.bookviewingapartment(v.get(tampon));
            //we book this viewing by sending the selected viewing in parameters of the function bookviewingapartment
        }
    }//GEN-LAST:event_jComboBoxViewingApartmentActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        //Button to validate the offer for a house
        int tampon = -1;
        int tampon2 = 0;
        //temporary buffers
        String selected = (String) jComboBox1.getSelectedItem();
        //we get what has been selected from the combobox
        for (int i = 0; i < result.size(); ++i) {
            //we go through all the properties available after the buyer entered the criteria for his research 
            if ((result.get(i).getdescription() + " id : " + result.get(i).getid()).equals(selected)) // if what has been selected is equal to the description + the id of a property contained in the arraylist of results
            {
                tampon = i;
                //we set the value of the buffer to i
            }
        }
        if (jTextField1.getText().trim().isEmpty()) //if the field for the amount of the offer is empty 
        {
            JOptionPane.showMessageDialog(null, "Please enter an amount if you want to make an order");
            //we let it know to the user 
        } else //otherwise 
        {
            for (int i = 0; i < o.size(); ++i) //we go through the arraylist of all the offer in the database 
            {
                if ((o.get(i).getidprop() == result.get(tampon).getid()) && (o.get(i).getidbuyer() == newbuyer.getid()) && (o.get(i).getdeclined() == false)) //We check if in the offer array list, there is one offer made by this buyer on this house that has not been declined yet
                {
                    tampon2++;
                    //we increment the buffer if there is one or more 
                }
            }
            if (tampon2 != 0) //if the buffer has been incremented, it means the buyer has already made an offer that has not been declined for the moment
            {
                JOptionPane.showMessageDialog(null, "You have already made an offer for this property that  has either been accepted or not treated");
                //we let him know
            } else //otherwise, there is no offer corresponding to these criterias
            {
                this.addoffer(result.get(tampon).getid(), Double.parseDouble(jTextField1.getText()));
                //so we call the add offer function that takes into parameters the id of the property and the amount of the offer
            }
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    public void display(Property nprop) //this method is used to display a single property once it has been selected in the results combobox
    {
        if (nprop.gettype().equals("Apartment")) //if the considered property is an apartment 
        {
            jTextField2.setText("");
            //the textfield corresponding to the amount of the offer is empty, to let the buyer complete it 
            if (jComboBoxViewingApartment.getItemCount() > 1) //if there is more than 1 viewing available for the considered apartment
            {
                while (jComboBoxViewingApartment.getItemAt(1) != null) //when we click twice on the box, the viewings of one apartment are added to the vsit of another one,
                {
                    jComboBoxViewingApartment.removeItem(jComboBoxViewingApartment.getItemAt(1));
                    //in order to remove that, we remove all the item that are not "book a viewing" from the combo box everytime we click on an apartment
                }
            }

            jLabelDescription1.setText(" Description : " + nprop.getdescription());
            //we set the field of the description with the description of the selected apartment
            jLabelPrice2.setText(" Price : " + Double.toString(nprop.getprice()));
            //we set the field of the price with the price of the selected apartment
            jLabelNumberFloors1.setText(" Number of floors : " + Integer.toString(nprop.getnumberfloors()));
            jLabelFloorNumber.setText(" Floor Number : " + Integer.toString(nprop.getfloornumber()));
            if (nprop.getparking() == true) {
                //if there is a parking, the boolean is true
                jLabelParking.setText(" Parking : Yes");
                //we set the field of the parking to yes
            } else //otherwise, there is no parking, the boolean is false 
            {
                jLabelParking.setText(" Parking : No");
                //we set the field of the parking to no
            }
            jLabelNumberRooms2.setText(" Number of rooms : " + Integer.toString(nprop.getnumberrooms()));
            //we set the field of the number of rooms with the number of rooms of the selected apartment
            jLabelLocation2.setText(" Location : " + nprop.getlocation());
            jLabelNumberBedrooms3.setText(" Number of bedrooms : " + Integer.toString(nprop.getnumberbedrooms()));
            jLabelNumberSurface1.setText(" Surface (m²) : " + Double.toString(nprop.getsurface()));
            if (nprop.getelevator() == true) {
                //if there is an elevator, the boolean is true
                jLabelElevator.setText(" Elevator : Yes");
                //we set the field of the elevator to yes
            } else {
                //otherwise, there is no elevator
                jLabelElevator.setText("Elevator : No");
                //we set the field of the elevator to no
            }

            for (int i = 0; i < v.size(); ++i) //then we go through all the viewings of the database
            {
                if (v.get(i).getidprop() == nprop.getid() && v.get(i).getidbuyer() == 0) //if the id of the property and the id of the buyer of the viewing corresponds to the selected property
                {
                    jComboBoxViewingApartment.addItem(v.get(i).gettime() + " idvisit : " + v.get(i).getid());
                    //we add this viewing in the combobox
                }
            }

            jPanelApartment.show();
            //we finally show the apartment panel
            jPanelHouse.hide();
            //and we hide the house panel

        } else {
            //if the considered property is a house 

            jTextField1.setText("");
            //the textfield corresponding to the amount of the offer is empty, to let the buyer complete it

            if (jComboBoxViewingHouse.getItemCount() > 1) //if there is more than 1 viewing available for the considered house
            {
                while (jComboBoxViewingHouse.getItemAt(1) != null) //when we click twice on the box, the viewings of one house are added to the vsit of another one,
                {
                    jComboBoxViewingHouse.removeItem(jComboBoxViewingHouse.getItemAt(1));
                    //in order to remove that, we remove all the item that are not "book a viewing" from the combo box everytime we click on a house
                }
            }

            jLabelDescription.setText(" Description : " + nprop.getdescription());
            //we set the field of the description with the description of the selected house
            jLabelPrice.setText(" Price : " + Double.toString(nprop.getprice()));
            //we set the field of the price with the price of the selected house
            jLabelNumberFloors.setText(" Number of floors : " + Integer.toString(nprop.getnumberfloors()));
            //we set the field of the number of floors with the number of floors of the selected house
            jLabelGardenSurface.setText(" Garden surface (m²) : " + Double.toString(nprop.getgardensurface()));
            jLabelLocation1.setText(" Location : " + nprop.getlocation());
            jLabelNumberRooms1.setText(" Number of rooms : " + Integer.toString(nprop.getnumberrooms()));
            jLabelNumberBedrooms2.setText(" Number of bedrooms : " + Integer.toString(nprop.getnumberbedrooms()));
            jLabelNumberSurface.setText(" Surface (m²) : " + Double.toString(nprop.getsurface()));
            if (nprop.getswimmingpool() == true) {
                //if there is a swimming pool, the boolean is true
                jLabelSwimmingPool.setText(" Swimmingpool : Yes");
                //we set the text fields to yes
            } else {
                //otherwise, if there is no swimming pool, the boolean is false
                jLabelSwimmingPool.setText("Swimmingpool : No");
                //we set the fields to no
            }

            for (int i = 0; i < v.size(); ++i) // then we go through all the viewings of the database
            {
                if (v.get(i).getidprop() == nprop.getid() && v.get(i).getidbuyer() == 0) //if the id of the property and the id of the buyer of the viewing corresponds to the selected property
                {
                    jComboBoxViewingHouse.addItem(v.get(i).gettime() + " idvisit : " + v.get(i).getid());
                    //then we add the viewing to the combo box
                }
            }
            jPanelHouse.show();
            //finally, we show the panel of the house
            jPanelApartment.hide();
            //and we hide the panel of the apartment
        }
    }

    public void bookviewinghouse(Visit a) //method that enables to book a viewing for a house
    {
        VisitDAOImpl vdao = new VisitDAOImpl();
        //we create an object of the VisitDAOImpl class, to update the properties of the viewing in the database   
        a.setidbuyer(newbuyer.getid());
        //we set the id of the buyer of the viewing to the id of the connected buyer
        vdao.updatebuyer(a);
        //we update the buyer of the viewing in the database
        JOptionPane.showMessageDialog(null, " Your viewing has been registered");
        //the viewing is registered 
        this.setVisible(false);
        //we finally close this frame to regenerate a new one
        BuyerResults b = new BuyerResults(newbuyer, buyers, sellers, emp, pr, v, o, result);
        //and we open a new frame, from BuyerResult again, to regenerate the frame
        b.setVisible(true);
        //we set the regenerated frame visible
    }

    public void initjcb1() {
        //this function adds the properties corresponding to the criteria researched before by the user to the jcombobox
        for (int i = 0; i < result.size(); ++i) {
            //we go through the result array list (array list where all the properties that result from the selection are)

            jComboBox1.addItem(result.get(i).getdescription() + " id : " + result.get(i).getid());
            //we add the items one by one
        }
    }

    public void bookviewingapartment(Visit a) //method that enables to book a viewing for a house
    {
        VisitDAOImpl vdao = new VisitDAOImpl();
        //we create an object of the VisitDAOImpl class, to update the properties of a viewing in the database 
        a.setidbuyer(newbuyer.getid());
        //we set the id of the buyer of the viewing to the id of the connected buyer
        vdao.updatebuyer(a);
        //we update the buyer of the viewing in the database 
        JOptionPane.showMessageDialog(null, " Your viewing has been registered");
        //the viewing is registered
        this.setVisible(false);
        //we finally close this frame to regenerate a new one
        BuyerResults b = new BuyerResults(newbuyer, buyers, sellers, emp, pr, v, o, result);
        //and we open a new frame, from BuyerResult again, to regenerate the frame
        b.setVisible(true);
        //we set the regenerated frame visible 
    }

    public void addoffer(int idprop, double p) //method that enables to add an offer
    {
        OfferDAOImpl odao = new OfferDAOImpl();
        //we create an object of the OfferDAOImpl class, to add the offer to the database
        o.add(new Offer(o.get(o.size() - 1).getid() + 1, newbuyer.getid(), idprop, p, false, false));
        //we add in the offer arraylist the new offer : the offer has the id buyer of the connected buyer, it is not accepted nor declined 
        odao.addoffer(o.get(o.size() - 1));
        //we add the offer in the database by calling the method addoffer from the OfferDAOImpl class 
        JOptionPane.showMessageDialog(null, "Your offer has been registered");
        //the offer has been registered
        this.setVisible(false);
        //we finally close this frame to regenerate a new one
        BuyerResults b = new BuyerResults(newbuyer, buyers, sellers, emp, pr, v, o, result);
        //and we open a new frame, from BuyerResult again, to regenerate the frame
        b.setVisible(true);
        //we set the regenerated frame visible
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BuyerResults.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BuyerResults.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BuyerResults.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BuyerResults.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new BuyerResults(newbuyer, buyers, sellers, emp, pr, v, o, result).setVisible(true);
            }
        });
    }

    private static ArrayList<Buyer> buyers = new ArrayList<>();
    //array list of all the application buyers in the database 
    private static ArrayList<Seller> sellers = new ArrayList<>();
    //array list of all the application sellers in the database
    private static ArrayList<Employee> emp = new ArrayList<>();
    //array list of all the application employees in the database 
    private static ArrayList<Property> pr = new ArrayList<>();
    //array list of all the application properties in the database
    private static ArrayList<Visit> v = new ArrayList<>();
    //array list of all the application viewings in the database
    private static ArrayList<Offer> o = new ArrayList<>();
    //array list of all the application offers in the database
    private static ArrayList<Property> result = new ArrayList<>();
    //array list of all the properties that result from the research, corresponding to the criteria 

    private static Buyer newbuyer;
    //Connected buyer
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBoxViewingApartment;
    private javax.swing.JComboBox jComboBoxViewingHouse;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabelDescription;
    private javax.swing.JLabel jLabelDescription1;
    private javax.swing.JLabel jLabelElevator;
    private javax.swing.JLabel jLabelFloorNumber;
    private javax.swing.JLabel jLabelGardenSurface;
    private javax.swing.JLabel jLabelLocation1;
    private javax.swing.JLabel jLabelLocation2;
    private javax.swing.JLabel jLabelNumberBedrooms2;
    private javax.swing.JLabel jLabelNumberBedrooms3;
    private javax.swing.JLabel jLabelNumberFloors;
    private javax.swing.JLabel jLabelNumberFloors1;
    private javax.swing.JLabel jLabelNumberRooms1;
    private javax.swing.JLabel jLabelNumberRooms2;
    private javax.swing.JLabel jLabelNumberSurface;
    private javax.swing.JLabel jLabelNumberSurface1;
    private javax.swing.JLabel jLabelParking;
    private javax.swing.JLabel jLabelPrice;
    private javax.swing.JLabel jLabelPrice2;
    private javax.swing.JLabel jLabelSwimmingPool;
    private javax.swing.JLabel jLabelType;
    private javax.swing.JLabel jLabelType1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanelApartment;
    private javax.swing.JPanel jPanelHouse;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
